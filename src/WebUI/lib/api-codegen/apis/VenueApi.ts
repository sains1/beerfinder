/* tslint:disable */
/* eslint-disable */
/**
 * Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ListVenuesResponse,
  ListVenuesSortOrder,
  ProblemDetails,
  VenueDetailDto,
} from "../models/index";
import {
  ListVenuesResponseFromJSON,
  ListVenuesResponseToJSON,
  ListVenuesSortOrderFromJSON,
  ListVenuesSortOrderToJSON,
  ProblemDetailsFromJSON,
  ProblemDetailsToJSON,
  VenueDetailDtoFromJSON,
  VenueDetailDtoToJSON,
} from "../models/index";

export interface GetVenueRequest {
  id: number;
}

export interface ListVenuesRequest {
  tags?: Array<string>;
  maxDistanceKm?: number;
  starsBeerGte?: number;
  starsAtmosphereGte?: number;
  starsAmenitiesGte?: number;
  starsValueGte?: number;
  sortBy?: ListVenuesSortOrder;
  skip?: number;
  limit?: number;
}

/**
 *
 */
export class VenueApi extends runtime.BaseAPI {
  /**
   * Get a venue by its id
   */
  async getVenueRaw(
    requestParameters: GetVenueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VenueDetailDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getVenue.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Venue/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VenueDetailDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get a venue by its id
   */
  async getVenue(
    requestParameters: GetVenueRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VenueDetailDto> {
    const response = await this.getVenueRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Search, sort, and filter venues
   */
  async listVenuesRaw(
    requestParameters: ListVenuesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ListVenuesResponse>> {
    const queryParameters: any = {};

    if (requestParameters.tags) {
      queryParameters["Tags"] = requestParameters.tags;
    }

    if (requestParameters.maxDistanceKm !== undefined) {
      queryParameters["MaxDistanceKm"] = requestParameters.maxDistanceKm;
    }

    if (requestParameters.starsBeerGte !== undefined) {
      queryParameters["StarsBeerGte"] = requestParameters.starsBeerGte;
    }

    if (requestParameters.starsAtmosphereGte !== undefined) {
      queryParameters["StarsAtmosphereGte"] =
        requestParameters.starsAtmosphereGte;
    }

    if (requestParameters.starsAmenitiesGte !== undefined) {
      queryParameters["StarsAmenitiesGte"] =
        requestParameters.starsAmenitiesGte;
    }

    if (requestParameters.starsValueGte !== undefined) {
      queryParameters["StarsValueGte"] = requestParameters.starsValueGte;
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters["SortBy"] = requestParameters.sortBy;
    }

    if (requestParameters.skip !== undefined) {
      queryParameters["Skip"] = requestParameters.skip;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["Limit"] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/Venue`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListVenuesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Search, sort, and filter venues
   */
  async listVenues(
    requestParameters: ListVenuesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ListVenuesResponse> {
    const response = await this.listVenuesRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
